import pytest

from src.bresenham import bresenham


@pytest.mark.parametrize(
    ("x1", "y1", "x2", "y2", "result"),
    (
        (0, 0, 0, 0, ((0, 0),)),
        (0, 0, 5, 0, ((0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0))),
        (0, 0, -5, 0, ((0, 0), (-1, 0), (-2, 0), (-3, 0), (-4, 0), (-5, 0))),
        (0, 0, 0, 5, ((0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5))),
        (0, 0, 0, -5, ((0, 0), (0, -1), (0, -2), (0, -3), (0, -4), (0, -5))),
        (0, 0, 2, 3, ((0, 0), (1, 1), (1, 2), (2, 3))),
        (0, 0, -2, 3, ((0, 0), (-1, 1), (-1, 2), (-2, 3))),
        (0, 0, 2, -3, ((0, 0), (1, -1), (1, -2), (2, -3))),
        (0, 0, -2, -3, ((0, 0), (-1, -1), (-1, -2), (-2, -3))),
        (-1, -3, 3, 3, ((-1, -3), (0, -2), (0, -1), (1, 0), (2, 1), (2, 2), (3, 3))),
        (
            0,
            0,
            11,
            1,
            (
                (0, 0),
                (1, 0),
                (2, 0),
                (3, 0),
                (4, 0),
                (5, 0),
                (6, 1),
                (7, 1),
                (8, 1),
                (9, 1),
                (10, 1),
                (11, 1),
            ),
        ),
    ),
)
def test_bresenham(x1, y1, x2, y2, result):
    assert tuple(bresenham(x1=x1, y1=y1, x2=x2, y2=y2)) == result
    assert tuple(bresenham(x1=x2, y1=y2, x2=x1, y2=y1)) == tuple(reversed(result))


def test_min_slope_uphill():
    assert tuple(bresenham(x1=0, y1=0, x2=10, y2=1)) == (
        (0, 0),
        (1, 0),
        (2, 0),
        (3, 0),
        (4, 0),
        (5, 1),
        (6, 1),
        (7, 1),
        (8, 1),
        (9, 1),
        (10, 1),
    )


def test_min_slope_downhill():
    assert tuple(bresenham(x1=10, y1=1, x2=0, y2=0)) == (
        (10, 1),
        (9, 1),
        (8, 1),
        (7, 1),
        (6, 1),
        (5, 0),
        (4, 0),
        (3, 0),
        (2, 0),
        (1, 0),
        (0, 0),
    )
